// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: T7Messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "T7Messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace T7 {
class GenericMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenericMessage> {
} _GenericMessage_default_instance_;
class ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Response> {
} _Response_default_instance_;
class HeartBeatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeartBeat> {
} _HeartBeat_default_instance_;
class TerminateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Terminate> {
} _Terminate_default_instance_;
class ConfigDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConfigData> {
} _ConfigData_default_instance_;
class MoveCameraDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MoveCamera> {
} _MoveCamera_default_instance_;
class ThermalRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ThermalRequest> {
} _ThermalRequest_default_instance_;
class AccelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Accel> {
} _Accel_default_instance_;
class GyroDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gyro> {
} _Gyro_default_instance_;
class AltitudeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Altitude> {
} _Altitude_default_instance_;
class AttitudeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Attitude> {
} _Attitude_default_instance_;
class TempDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Temp> {
} _Temp_default_instance_;
class BatteryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Battery> {
} _Battery_default_instance_;
class HeadingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Heading> {
} _Heading_default_instance_;
class ThermalResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ThermalResponse> {
} _ThermalResponse_default_instance_;

namespace protobuf_T7Messages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, msgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, heartbeat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, terminate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, configdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, movecamera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, thermalrequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, gyro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, attitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, temp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, bat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMessage, thermalresponse_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, roger_that_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, alive_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Terminate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Terminate, terminatekey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, configkey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveCamera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveCamera, arrowkey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThermalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThermalRequest, request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accel, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accel, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accel, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gyro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gyro, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gyro, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gyro, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Altitude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Altitude, alt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attitude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attitude, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attitude, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attitude, yaw_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Temp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Temp, temp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battery, percent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heading, heading_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThermalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThermalResponse, response_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(GenericMessage)},
  { 20, -1, sizeof(Response)},
  { 25, -1, sizeof(HeartBeat)},
  { 30, -1, sizeof(Terminate)},
  { 35, -1, sizeof(ConfigData)},
  { 40, -1, sizeof(MoveCamera)},
  { 45, -1, sizeof(ThermalRequest)},
  { 50, -1, sizeof(Accel)},
  { 57, -1, sizeof(Gyro)},
  { 64, -1, sizeof(Altitude)},
  { 69, -1, sizeof(Attitude)},
  { 76, -1, sizeof(Temp)},
  { 81, -1, sizeof(Battery)},
  { 86, -1, sizeof(Heading)},
  { 91, -1, sizeof(ThermalResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GenericMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeartBeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Terminate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfigData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MoveCamera_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ThermalRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Accel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gyro_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Altitude_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Attitude_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Temp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Battery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Heading_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ThermalResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "T7Messages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace

void TableStruct::Shutdown() {
  _GenericMessage_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _HeartBeat_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Terminate_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ConfigData_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _MoveCamera_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ThermalRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Accel_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Gyro_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Altitude_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Attitude_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Temp_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _Battery_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _Heading_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _ThermalResponse_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _GenericMessage_default_instance_.DefaultConstruct();
  _Response_default_instance_.DefaultConstruct();
  _HeartBeat_default_instance_.DefaultConstruct();
  _Terminate_default_instance_.DefaultConstruct();
  _ConfigData_default_instance_.DefaultConstruct();
  _MoveCamera_default_instance_.DefaultConstruct();
  _ThermalRequest_default_instance_.DefaultConstruct();
  _Accel_default_instance_.DefaultConstruct();
  _Gyro_default_instance_.DefaultConstruct();
  _Altitude_default_instance_.DefaultConstruct();
  _Attitude_default_instance_.DefaultConstruct();
  _Temp_default_instance_.DefaultConstruct();
  _Battery_default_instance_.DefaultConstruct();
  _Heading_default_instance_.DefaultConstruct();
  _ThermalResponse_default_instance_.DefaultConstruct();
  _GenericMessage_default_instance_.get_mutable()->response_ = const_cast< ::T7::Response*>(
      ::T7::Response::internal_default_instance());
  _GenericMessage_default_instance_.get_mutable()->heartbeat_ = const_cast< ::T7::HeartBeat*>(
      ::T7::HeartBeat::internal_default_instance());
  _GenericMessage_default_instance_.get_mutable()->terminate_ = const_cast< ::T7::Terminate*>(
      ::T7::Terminate::internal_default_instance());
  _GenericMessage_default_instance_.get_mutable()->configdata_ = const_cast< ::T7::ConfigData*>(
      ::T7::ConfigData::internal_default_instance());
  _GenericMessage_default_instance_.get_mutable()->movecamera_ = const_cast< ::T7::MoveCamera*>(
      ::T7::MoveCamera::internal_default_instance());
  _GenericMessage_default_instance_.get_mutable()->thermalrequest_ = const_cast< ::T7::ThermalRequest*>(
      ::T7::ThermalRequest::internal_default_instance());
  _GenericMessage_default_instance_.get_mutable()->accel_ = const_cast< ::T7::Accel*>(
      ::T7::Accel::internal_default_instance());
  _GenericMessage_default_instance_.get_mutable()->gyro_ = const_cast< ::T7::Gyro*>(
      ::T7::Gyro::internal_default_instance());
  _GenericMessage_default_instance_.get_mutable()->altitude_ = const_cast< ::T7::Altitude*>(
      ::T7::Altitude::internal_default_instance());
  _GenericMessage_default_instance_.get_mutable()->attitude_ = const_cast< ::T7::Attitude*>(
      ::T7::Attitude::internal_default_instance());
  _GenericMessage_default_instance_.get_mutable()->temp_ = const_cast< ::T7::Temp*>(
      ::T7::Temp::internal_default_instance());
  _GenericMessage_default_instance_.get_mutable()->bat_ = const_cast< ::T7::Battery*>(
      ::T7::Battery::internal_default_instance());
  _GenericMessage_default_instance_.get_mutable()->head_ = const_cast< ::T7::Heading*>(
      ::T7::Heading::internal_default_instance());
  _GenericMessage_default_instance_.get_mutable()->thermalresponse_ = const_cast< ::T7::ThermalResponse*>(
      ::T7::ThermalResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020T7Messages.proto\022\002T7\"\317\005\n\016GenericMessag"
      "e\022\017\n\007msgtype\030\001 \001(\005\022\014\n\004time\030\002 \001(\001\022\036\n\010resp"
      "onse\030\003 \001(\0132\014.T7.Response\022 \n\theartbeat\030\004 "
      "\001(\0132\r.T7.HeartBeat\022 \n\tterminate\030\005 \001(\0132\r."
      "T7.Terminate\022\"\n\nconfigdata\030\006 \001(\0132\016.T7.Co"
      "nfigData\022\"\n\nmovecamera\030\007 \001(\0132\016.T7.MoveCa"
      "mera\022*\n\016thermalrequest\030\017 \001(\0132\022.T7.Therma"
      "lRequest\022\030\n\005accel\030\010 \001(\0132\t.T7.Accel\022\026\n\004gy"
      "ro\030\t \001(\0132\010.T7.Gyro\022\036\n\010altitude\030\n \001(\0132\014.T"
      "7.Altitude\022\036\n\010attitude\030\013 \001(\0132\014.T7.Attitu"
      "de\022\026\n\004temp\030\014 \001(\0132\010.T7.Temp\022\030\n\003bat\030\r \001(\0132"
      "\013.T7.Battery\022\031\n\004head\030\016 \001(\0132\013.T7.Heading\022"
      ",\n\017thermalresponse\030\020 \001(\0132\023.T7.ThermalRes"
      "ponse\"\330\001\n\007MsgType\022\014\n\010RESPONSE\020\000\022\r\n\tHEART"
      "BEAT\020\001\022\r\n\tTERMINATE\020\002\022\017\n\013CONFIG_DATA\020e\022\017"
      "\n\013MOVE_CAMERA\020f\022\023\n\017THERMAL_REQUEST\020g\022\n\n\005"
      "ACCEL\020\310\001\022\t\n\004GYRO\020\311\001\022\r\n\010ALTITUDE\020\312\001\022\r\n\010AT"
      "TITUDE\020\313\001\022\t\n\004TEMP\020\314\001\022\010\n\003BAT\020\315\001\022\t\n\004HEAD\020\316"
      "\001\022\025\n\020THERMAL_RESPONSE\020\317\001\"\036\n\010Response\022\022\n\n"
      "roger_that\030\001 \001(\010\"\032\n\tHeartBeat\022\r\n\005alive\030\001"
      " \001(\010\"j\n\tTerminate\022\024\n\014terminateKey\030\001 \001(\005\""
      "G\n\rTerminateKeys\022\021\n\rselfTerminate\020\000\022\020\n\014s"
      "oftShutdown\020\001\022\021\n\remergencyStop\020\002\"\267\001\n\nCon"
      "figData\022\021\n\tconfigKey\030\001 \001(\005\"\225\001\n\nToggleKey"
      "s\022\017\n\013toggleAccel\020\000\022\016\n\ntoggleGyro\020\001\022\022\n\016to"
      "ggleAltitude\020\002\022\022\n\016toggleAttitude\020\003\022\016\n\nto"
      "ggleTemp\020\004\022\r\n\ttoggleBat\020\005\022\017\n\013toggleArray"
      "\020\006\022\016\n\ntoggleHead\020\007\"R\n\nMoveCamera\022\020\n\010arro"
      "wKey\030\001 \001(\005\"2\n\tArrowKeys\022\006\n\002UP\020\000\022\t\n\005RIGHT"
      "\020\001\022\010\n\004DOWN\020\002\022\010\n\004LEFT\020\003\"!\n\016ThermalRequest"
      "\022\017\n\007request\030\001 \001(\010\"(\n\005Accel\022\t\n\001x\030\001 \001(\001\022\t\n"
      "\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\'\n\004Gyro\022\t\n\001x\030\001 \001(\001\022\t"
      "\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\027\n\010Altitude\022\013\n\003alt\030"
      "\001 \001(\001\"4\n\010Attitude\022\014\n\004roll\030\001 \001(\001\022\r\n\005pitch"
      "\030\002 \001(\001\022\013\n\003yaw\030\003 \001(\001\"\024\n\004Temp\022\014\n\004temp\030\001 \001("
      "\001\"\032\n\007Battery\022\017\n\007percent\030\001 \001(\001\"\032\n\007Heading"
      "\022\017\n\007heading\030\001 \001(\001\"#\n\017ThermalResponse\022\020\n\010"
      "response\030\001 \001(\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1502);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "T7Messages.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_T7Messages_2eproto

const ::google::protobuf::EnumDescriptor* GenericMessage_MsgType_descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_enum_descriptors[0];
}
bool GenericMessage_MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 101:
    case 102:
    case 103:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GenericMessage_MsgType GenericMessage::RESPONSE;
const GenericMessage_MsgType GenericMessage::HEARTBEAT;
const GenericMessage_MsgType GenericMessage::TERMINATE;
const GenericMessage_MsgType GenericMessage::CONFIG_DATA;
const GenericMessage_MsgType GenericMessage::MOVE_CAMERA;
const GenericMessage_MsgType GenericMessage::THERMAL_REQUEST;
const GenericMessage_MsgType GenericMessage::ACCEL;
const GenericMessage_MsgType GenericMessage::GYRO;
const GenericMessage_MsgType GenericMessage::ALTITUDE;
const GenericMessage_MsgType GenericMessage::ATTITUDE;
const GenericMessage_MsgType GenericMessage::TEMP;
const GenericMessage_MsgType GenericMessage::BAT;
const GenericMessage_MsgType GenericMessage::HEAD;
const GenericMessage_MsgType GenericMessage::THERMAL_RESPONSE;
const GenericMessage_MsgType GenericMessage::MsgType_MIN;
const GenericMessage_MsgType GenericMessage::MsgType_MAX;
const int GenericMessage::MsgType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Terminate_TerminateKeys_descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_enum_descriptors[1];
}
bool Terminate_TerminateKeys_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Terminate_TerminateKeys Terminate::selfTerminate;
const Terminate_TerminateKeys Terminate::softShutdown;
const Terminate_TerminateKeys Terminate::emergencyStop;
const Terminate_TerminateKeys Terminate::TerminateKeys_MIN;
const Terminate_TerminateKeys Terminate::TerminateKeys_MAX;
const int Terminate::TerminateKeys_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConfigData_ToggleKeys_descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_enum_descriptors[2];
}
bool ConfigData_ToggleKeys_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConfigData_ToggleKeys ConfigData::toggleAccel;
const ConfigData_ToggleKeys ConfigData::toggleGyro;
const ConfigData_ToggleKeys ConfigData::toggleAltitude;
const ConfigData_ToggleKeys ConfigData::toggleAttitude;
const ConfigData_ToggleKeys ConfigData::toggleTemp;
const ConfigData_ToggleKeys ConfigData::toggleBat;
const ConfigData_ToggleKeys ConfigData::toggleArray;
const ConfigData_ToggleKeys ConfigData::toggleHead;
const ConfigData_ToggleKeys ConfigData::ToggleKeys_MIN;
const ConfigData_ToggleKeys ConfigData::ToggleKeys_MAX;
const int ConfigData::ToggleKeys_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MoveCamera_ArrowKeys_descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_enum_descriptors[3];
}
bool MoveCamera_ArrowKeys_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MoveCamera_ArrowKeys MoveCamera::UP;
const MoveCamera_ArrowKeys MoveCamera::RIGHT;
const MoveCamera_ArrowKeys MoveCamera::DOWN;
const MoveCamera_ArrowKeys MoveCamera::LEFT;
const MoveCamera_ArrowKeys MoveCamera::ArrowKeys_MIN;
const MoveCamera_ArrowKeys MoveCamera::ArrowKeys_MAX;
const int MoveCamera::ArrowKeys_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenericMessage::kMsgtypeFieldNumber;
const int GenericMessage::kTimeFieldNumber;
const int GenericMessage::kResponseFieldNumber;
const int GenericMessage::kHeartbeatFieldNumber;
const int GenericMessage::kTerminateFieldNumber;
const int GenericMessage::kConfigdataFieldNumber;
const int GenericMessage::kMovecameraFieldNumber;
const int GenericMessage::kThermalrequestFieldNumber;
const int GenericMessage::kAccelFieldNumber;
const int GenericMessage::kGyroFieldNumber;
const int GenericMessage::kAltitudeFieldNumber;
const int GenericMessage::kAttitudeFieldNumber;
const int GenericMessage::kTempFieldNumber;
const int GenericMessage::kBatFieldNumber;
const int GenericMessage::kHeadFieldNumber;
const int GenericMessage::kThermalresponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericMessage::GenericMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.GenericMessage)
}
GenericMessage::GenericMessage(const GenericMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::T7::Response(*from.response_);
  } else {
    response_ = NULL;
  }
  if (from.has_heartbeat()) {
    heartbeat_ = new ::T7::HeartBeat(*from.heartbeat_);
  } else {
    heartbeat_ = NULL;
  }
  if (from.has_terminate()) {
    terminate_ = new ::T7::Terminate(*from.terminate_);
  } else {
    terminate_ = NULL;
  }
  if (from.has_configdata()) {
    configdata_ = new ::T7::ConfigData(*from.configdata_);
  } else {
    configdata_ = NULL;
  }
  if (from.has_movecamera()) {
    movecamera_ = new ::T7::MoveCamera(*from.movecamera_);
  } else {
    movecamera_ = NULL;
  }
  if (from.has_thermalrequest()) {
    thermalrequest_ = new ::T7::ThermalRequest(*from.thermalrequest_);
  } else {
    thermalrequest_ = NULL;
  }
  if (from.has_accel()) {
    accel_ = new ::T7::Accel(*from.accel_);
  } else {
    accel_ = NULL;
  }
  if (from.has_gyro()) {
    gyro_ = new ::T7::Gyro(*from.gyro_);
  } else {
    gyro_ = NULL;
  }
  if (from.has_altitude()) {
    altitude_ = new ::T7::Altitude(*from.altitude_);
  } else {
    altitude_ = NULL;
  }
  if (from.has_attitude()) {
    attitude_ = new ::T7::Attitude(*from.attitude_);
  } else {
    attitude_ = NULL;
  }
  if (from.has_temp()) {
    temp_ = new ::T7::Temp(*from.temp_);
  } else {
    temp_ = NULL;
  }
  if (from.has_bat()) {
    bat_ = new ::T7::Battery(*from.bat_);
  } else {
    bat_ = NULL;
  }
  if (from.has_head()) {
    head_ = new ::T7::Heading(*from.head_);
  } else {
    head_ = NULL;
  }
  if (from.has_thermalresponse()) {
    thermalresponse_ = new ::T7::ThermalResponse(*from.thermalresponse_);
  } else {
    thermalresponse_ = NULL;
  }
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&msgtype_) -
    reinterpret_cast<char*>(&time_) + sizeof(msgtype_));
  // @@protoc_insertion_point(copy_constructor:T7.GenericMessage)
}

void GenericMessage::SharedCtor() {
  ::memset(&response_, 0, reinterpret_cast<char*>(&msgtype_) -
    reinterpret_cast<char*>(&response_) + sizeof(msgtype_));
  _cached_size_ = 0;
}

GenericMessage::~GenericMessage() {
  // @@protoc_insertion_point(destructor:T7.GenericMessage)
  SharedDtor();
}

void GenericMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete response_;
  }
  if (this != internal_default_instance()) {
    delete heartbeat_;
  }
  if (this != internal_default_instance()) {
    delete terminate_;
  }
  if (this != internal_default_instance()) {
    delete configdata_;
  }
  if (this != internal_default_instance()) {
    delete movecamera_;
  }
  if (this != internal_default_instance()) {
    delete thermalrequest_;
  }
  if (this != internal_default_instance()) {
    delete accel_;
  }
  if (this != internal_default_instance()) {
    delete gyro_;
  }
  if (this != internal_default_instance()) {
    delete altitude_;
  }
  if (this != internal_default_instance()) {
    delete attitude_;
  }
  if (this != internal_default_instance()) {
    delete temp_;
  }
  if (this != internal_default_instance()) {
    delete bat_;
  }
  if (this != internal_default_instance()) {
    delete head_;
  }
  if (this != internal_default_instance()) {
    delete thermalresponse_;
  }
}

void GenericMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericMessage::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[0].descriptor;
}

const GenericMessage& GenericMessage::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

GenericMessage* GenericMessage::New(::google::protobuf::Arena* arena) const {
  GenericMessage* n = new GenericMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenericMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.GenericMessage)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  if (GetArenaNoVirtual() == NULL && heartbeat_ != NULL) {
    delete heartbeat_;
  }
  heartbeat_ = NULL;
  if (GetArenaNoVirtual() == NULL && terminate_ != NULL) {
    delete terminate_;
  }
  terminate_ = NULL;
  if (GetArenaNoVirtual() == NULL && configdata_ != NULL) {
    delete configdata_;
  }
  configdata_ = NULL;
  if (GetArenaNoVirtual() == NULL && movecamera_ != NULL) {
    delete movecamera_;
  }
  movecamera_ = NULL;
  if (GetArenaNoVirtual() == NULL && thermalrequest_ != NULL) {
    delete thermalrequest_;
  }
  thermalrequest_ = NULL;
  if (GetArenaNoVirtual() == NULL && accel_ != NULL) {
    delete accel_;
  }
  accel_ = NULL;
  if (GetArenaNoVirtual() == NULL && gyro_ != NULL) {
    delete gyro_;
  }
  gyro_ = NULL;
  if (GetArenaNoVirtual() == NULL && altitude_ != NULL) {
    delete altitude_;
  }
  altitude_ = NULL;
  if (GetArenaNoVirtual() == NULL && attitude_ != NULL) {
    delete attitude_;
  }
  attitude_ = NULL;
  if (GetArenaNoVirtual() == NULL && temp_ != NULL) {
    delete temp_;
  }
  temp_ = NULL;
  if (GetArenaNoVirtual() == NULL && bat_ != NULL) {
    delete bat_;
  }
  bat_ = NULL;
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  if (GetArenaNoVirtual() == NULL && thermalresponse_ != NULL) {
    delete thermalresponse_;
  }
  thermalresponse_ = NULL;
  ::memset(&time_, 0, reinterpret_cast<char*>(&msgtype_) -
    reinterpret_cast<char*>(&time_) + sizeof(msgtype_));
}

bool GenericMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.GenericMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 msgtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .T7.Response response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .T7.HeartBeat heartbeat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .T7.Terminate terminate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_terminate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .T7.ConfigData configdata = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .T7.MoveCamera movecamera = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movecamera()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .T7.Accel accel = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .T7.Gyro gyro = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gyro()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .T7.Altitude altitude = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_altitude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .T7.Attitude attitude = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attitude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .T7.Temp temp = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_temp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .T7.Battery bat = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .T7.Heading head = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .T7.ThermalRequest thermalrequest = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thermalrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .T7.ThermalResponse thermalresponse = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thermalresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.GenericMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.GenericMessage)
  return false;
#undef DO_
}

void GenericMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.GenericMessage)
  // int32 msgtype = 1;
  if (this->msgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgtype(), output);
  }

  // double time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  // .T7.Response response = 3;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->response_, output);
  }

  // .T7.HeartBeat heartbeat = 4;
  if (this->has_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->heartbeat_, output);
  }

  // .T7.Terminate terminate = 5;
  if (this->has_terminate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->terminate_, output);
  }

  // .T7.ConfigData configdata = 6;
  if (this->has_configdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->configdata_, output);
  }

  // .T7.MoveCamera movecamera = 7;
  if (this->has_movecamera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->movecamera_, output);
  }

  // .T7.Accel accel = 8;
  if (this->has_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->accel_, output);
  }

  // .T7.Gyro gyro = 9;
  if (this->has_gyro()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->gyro_, output);
  }

  // .T7.Altitude altitude = 10;
  if (this->has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->altitude_, output);
  }

  // .T7.Attitude attitude = 11;
  if (this->has_attitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->attitude_, output);
  }

  // .T7.Temp temp = 12;
  if (this->has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->temp_, output);
  }

  // .T7.Battery bat = 13;
  if (this->has_bat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->bat_, output);
  }

  // .T7.Heading head = 14;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->head_, output);
  }

  // .T7.ThermalRequest thermalrequest = 15;
  if (this->has_thermalrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->thermalrequest_, output);
  }

  // .T7.ThermalResponse thermalresponse = 16;
  if (this->has_thermalresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->thermalresponse_, output);
  }

  // @@protoc_insertion_point(serialize_end:T7.GenericMessage)
}

::google::protobuf::uint8* GenericMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.GenericMessage)
  // int32 msgtype = 1;
  if (this->msgtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgtype(), target);
  }

  // double time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time(), target);
  }

  // .T7.Response response = 3;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->response_, false, target);
  }

  // .T7.HeartBeat heartbeat = 4;
  if (this->has_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->heartbeat_, false, target);
  }

  // .T7.Terminate terminate = 5;
  if (this->has_terminate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->terminate_, false, target);
  }

  // .T7.ConfigData configdata = 6;
  if (this->has_configdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->configdata_, false, target);
  }

  // .T7.MoveCamera movecamera = 7;
  if (this->has_movecamera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->movecamera_, false, target);
  }

  // .T7.Accel accel = 8;
  if (this->has_accel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->accel_, false, target);
  }

  // .T7.Gyro gyro = 9;
  if (this->has_gyro()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->gyro_, false, target);
  }

  // .T7.Altitude altitude = 10;
  if (this->has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->altitude_, false, target);
  }

  // .T7.Attitude attitude = 11;
  if (this->has_attitude()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->attitude_, false, target);
  }

  // .T7.Temp temp = 12;
  if (this->has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->temp_, false, target);
  }

  // .T7.Battery bat = 13;
  if (this->has_bat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->bat_, false, target);
  }

  // .T7.Heading head = 14;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->head_, false, target);
  }

  // .T7.ThermalRequest thermalrequest = 15;
  if (this->has_thermalrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->thermalrequest_, false, target);
  }

  // .T7.ThermalResponse thermalresponse = 16;
  if (this->has_thermalresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->thermalresponse_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.GenericMessage)
  return target;
}

size_t GenericMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.GenericMessage)
  size_t total_size = 0;

  // .T7.Response response = 3;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // .T7.HeartBeat heartbeat = 4;
  if (this->has_heartbeat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heartbeat_);
  }

  // .T7.Terminate terminate = 5;
  if (this->has_terminate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->terminate_);
  }

  // .T7.ConfigData configdata = 6;
  if (this->has_configdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->configdata_);
  }

  // .T7.MoveCamera movecamera = 7;
  if (this->has_movecamera()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->movecamera_);
  }

  // .T7.ThermalRequest thermalrequest = 15;
  if (this->has_thermalrequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thermalrequest_);
  }

  // .T7.Accel accel = 8;
  if (this->has_accel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accel_);
  }

  // .T7.Gyro gyro = 9;
  if (this->has_gyro()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gyro_);
  }

  // .T7.Altitude altitude = 10;
  if (this->has_altitude()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->altitude_);
  }

  // .T7.Attitude attitude = 11;
  if (this->has_attitude()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->attitude_);
  }

  // .T7.Temp temp = 12;
  if (this->has_temp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->temp_);
  }

  // .T7.Battery bat = 13;
  if (this->has_bat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bat_);
  }

  // .T7.Heading head = 14;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // .T7.ThermalResponse thermalresponse = 16;
  if (this->has_thermalresponse()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thermalresponse_);
  }

  // double time = 2;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  // int32 msgtype = 1;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.GenericMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenericMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.GenericMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.GenericMessage)
    MergeFrom(*source);
  }
}

void GenericMessage::MergeFrom(const GenericMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.GenericMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::T7::Response::MergeFrom(from.response());
  }
  if (from.has_heartbeat()) {
    mutable_heartbeat()->::T7::HeartBeat::MergeFrom(from.heartbeat());
  }
  if (from.has_terminate()) {
    mutable_terminate()->::T7::Terminate::MergeFrom(from.terminate());
  }
  if (from.has_configdata()) {
    mutable_configdata()->::T7::ConfigData::MergeFrom(from.configdata());
  }
  if (from.has_movecamera()) {
    mutable_movecamera()->::T7::MoveCamera::MergeFrom(from.movecamera());
  }
  if (from.has_thermalrequest()) {
    mutable_thermalrequest()->::T7::ThermalRequest::MergeFrom(from.thermalrequest());
  }
  if (from.has_accel()) {
    mutable_accel()->::T7::Accel::MergeFrom(from.accel());
  }
  if (from.has_gyro()) {
    mutable_gyro()->::T7::Gyro::MergeFrom(from.gyro());
  }
  if (from.has_altitude()) {
    mutable_altitude()->::T7::Altitude::MergeFrom(from.altitude());
  }
  if (from.has_attitude()) {
    mutable_attitude()->::T7::Attitude::MergeFrom(from.attitude());
  }
  if (from.has_temp()) {
    mutable_temp()->::T7::Temp::MergeFrom(from.temp());
  }
  if (from.has_bat()) {
    mutable_bat()->::T7::Battery::MergeFrom(from.bat());
  }
  if (from.has_head()) {
    mutable_head()->::T7::Heading::MergeFrom(from.head());
  }
  if (from.has_thermalresponse()) {
    mutable_thermalresponse()->::T7::ThermalResponse::MergeFrom(from.thermalresponse());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.msgtype() != 0) {
    set_msgtype(from.msgtype());
  }
}

void GenericMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.GenericMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericMessage::CopyFrom(const GenericMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.GenericMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericMessage::IsInitialized() const {
  return true;
}

void GenericMessage::Swap(GenericMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericMessage::InternalSwap(GenericMessage* other) {
  std::swap(response_, other->response_);
  std::swap(heartbeat_, other->heartbeat_);
  std::swap(terminate_, other->terminate_);
  std::swap(configdata_, other->configdata_);
  std::swap(movecamera_, other->movecamera_);
  std::swap(thermalrequest_, other->thermalrequest_);
  std::swap(accel_, other->accel_);
  std::swap(gyro_, other->gyro_);
  std::swap(altitude_, other->altitude_);
  std::swap(attitude_, other->attitude_);
  std::swap(temp_, other->temp_);
  std::swap(bat_, other->bat_);
  std::swap(head_, other->head_);
  std::swap(thermalresponse_, other->thermalresponse_);
  std::swap(time_, other->time_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenericMessage::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenericMessage

// int32 msgtype = 1;
void GenericMessage::clear_msgtype() {
  msgtype_ = 0;
}
::google::protobuf::int32 GenericMessage::msgtype() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.msgtype)
  return msgtype_;
}
void GenericMessage::set_msgtype(::google::protobuf::int32 value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:T7.GenericMessage.msgtype)
}

// double time = 2;
void GenericMessage::clear_time() {
  time_ = 0;
}
double GenericMessage::time() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.time)
  return time_;
}
void GenericMessage::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:T7.GenericMessage.time)
}

// .T7.Response response = 3;
bool GenericMessage::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void GenericMessage::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::T7::Response& GenericMessage::response() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.response)
  return response_ != NULL ? *response_
                         : *::T7::Response::internal_default_instance();
}
::T7::Response* GenericMessage::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::T7::Response;
  }
  // @@protoc_insertion_point(field_mutable:T7.GenericMessage.response)
  return response_;
}
::T7::Response* GenericMessage::release_response() {
  // @@protoc_insertion_point(field_release:T7.GenericMessage.response)
  
  ::T7::Response* temp = response_;
  response_ = NULL;
  return temp;
}
void GenericMessage::set_allocated_response(::T7::Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:T7.GenericMessage.response)
}

// .T7.HeartBeat heartbeat = 4;
bool GenericMessage::has_heartbeat() const {
  return this != internal_default_instance() && heartbeat_ != NULL;
}
void GenericMessage::clear_heartbeat() {
  if (GetArenaNoVirtual() == NULL && heartbeat_ != NULL) delete heartbeat_;
  heartbeat_ = NULL;
}
const ::T7::HeartBeat& GenericMessage::heartbeat() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.heartbeat)
  return heartbeat_ != NULL ? *heartbeat_
                         : *::T7::HeartBeat::internal_default_instance();
}
::T7::HeartBeat* GenericMessage::mutable_heartbeat() {
  
  if (heartbeat_ == NULL) {
    heartbeat_ = new ::T7::HeartBeat;
  }
  // @@protoc_insertion_point(field_mutable:T7.GenericMessage.heartbeat)
  return heartbeat_;
}
::T7::HeartBeat* GenericMessage::release_heartbeat() {
  // @@protoc_insertion_point(field_release:T7.GenericMessage.heartbeat)
  
  ::T7::HeartBeat* temp = heartbeat_;
  heartbeat_ = NULL;
  return temp;
}
void GenericMessage::set_allocated_heartbeat(::T7::HeartBeat* heartbeat) {
  delete heartbeat_;
  heartbeat_ = heartbeat;
  if (heartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:T7.GenericMessage.heartbeat)
}

// .T7.Terminate terminate = 5;
bool GenericMessage::has_terminate() const {
  return this != internal_default_instance() && terminate_ != NULL;
}
void GenericMessage::clear_terminate() {
  if (GetArenaNoVirtual() == NULL && terminate_ != NULL) delete terminate_;
  terminate_ = NULL;
}
const ::T7::Terminate& GenericMessage::terminate() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.terminate)
  return terminate_ != NULL ? *terminate_
                         : *::T7::Terminate::internal_default_instance();
}
::T7::Terminate* GenericMessage::mutable_terminate() {
  
  if (terminate_ == NULL) {
    terminate_ = new ::T7::Terminate;
  }
  // @@protoc_insertion_point(field_mutable:T7.GenericMessage.terminate)
  return terminate_;
}
::T7::Terminate* GenericMessage::release_terminate() {
  // @@protoc_insertion_point(field_release:T7.GenericMessage.terminate)
  
  ::T7::Terminate* temp = terminate_;
  terminate_ = NULL;
  return temp;
}
void GenericMessage::set_allocated_terminate(::T7::Terminate* terminate) {
  delete terminate_;
  terminate_ = terminate;
  if (terminate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:T7.GenericMessage.terminate)
}

// .T7.ConfigData configdata = 6;
bool GenericMessage::has_configdata() const {
  return this != internal_default_instance() && configdata_ != NULL;
}
void GenericMessage::clear_configdata() {
  if (GetArenaNoVirtual() == NULL && configdata_ != NULL) delete configdata_;
  configdata_ = NULL;
}
const ::T7::ConfigData& GenericMessage::configdata() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.configdata)
  return configdata_ != NULL ? *configdata_
                         : *::T7::ConfigData::internal_default_instance();
}
::T7::ConfigData* GenericMessage::mutable_configdata() {
  
  if (configdata_ == NULL) {
    configdata_ = new ::T7::ConfigData;
  }
  // @@protoc_insertion_point(field_mutable:T7.GenericMessage.configdata)
  return configdata_;
}
::T7::ConfigData* GenericMessage::release_configdata() {
  // @@protoc_insertion_point(field_release:T7.GenericMessage.configdata)
  
  ::T7::ConfigData* temp = configdata_;
  configdata_ = NULL;
  return temp;
}
void GenericMessage::set_allocated_configdata(::T7::ConfigData* configdata) {
  delete configdata_;
  configdata_ = configdata;
  if (configdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:T7.GenericMessage.configdata)
}

// .T7.MoveCamera movecamera = 7;
bool GenericMessage::has_movecamera() const {
  return this != internal_default_instance() && movecamera_ != NULL;
}
void GenericMessage::clear_movecamera() {
  if (GetArenaNoVirtual() == NULL && movecamera_ != NULL) delete movecamera_;
  movecamera_ = NULL;
}
const ::T7::MoveCamera& GenericMessage::movecamera() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.movecamera)
  return movecamera_ != NULL ? *movecamera_
                         : *::T7::MoveCamera::internal_default_instance();
}
::T7::MoveCamera* GenericMessage::mutable_movecamera() {
  
  if (movecamera_ == NULL) {
    movecamera_ = new ::T7::MoveCamera;
  }
  // @@protoc_insertion_point(field_mutable:T7.GenericMessage.movecamera)
  return movecamera_;
}
::T7::MoveCamera* GenericMessage::release_movecamera() {
  // @@protoc_insertion_point(field_release:T7.GenericMessage.movecamera)
  
  ::T7::MoveCamera* temp = movecamera_;
  movecamera_ = NULL;
  return temp;
}
void GenericMessage::set_allocated_movecamera(::T7::MoveCamera* movecamera) {
  delete movecamera_;
  movecamera_ = movecamera;
  if (movecamera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:T7.GenericMessage.movecamera)
}

// .T7.ThermalRequest thermalrequest = 15;
bool GenericMessage::has_thermalrequest() const {
  return this != internal_default_instance() && thermalrequest_ != NULL;
}
void GenericMessage::clear_thermalrequest() {
  if (GetArenaNoVirtual() == NULL && thermalrequest_ != NULL) delete thermalrequest_;
  thermalrequest_ = NULL;
}
const ::T7::ThermalRequest& GenericMessage::thermalrequest() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.thermalrequest)
  return thermalrequest_ != NULL ? *thermalrequest_
                         : *::T7::ThermalRequest::internal_default_instance();
}
::T7::ThermalRequest* GenericMessage::mutable_thermalrequest() {
  
  if (thermalrequest_ == NULL) {
    thermalrequest_ = new ::T7::ThermalRequest;
  }
  // @@protoc_insertion_point(field_mutable:T7.GenericMessage.thermalrequest)
  return thermalrequest_;
}
::T7::ThermalRequest* GenericMessage::release_thermalrequest() {
  // @@protoc_insertion_point(field_release:T7.GenericMessage.thermalrequest)
  
  ::T7::ThermalRequest* temp = thermalrequest_;
  thermalrequest_ = NULL;
  return temp;
}
void GenericMessage::set_allocated_thermalrequest(::T7::ThermalRequest* thermalrequest) {
  delete thermalrequest_;
  thermalrequest_ = thermalrequest;
  if (thermalrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:T7.GenericMessage.thermalrequest)
}

// .T7.Accel accel = 8;
bool GenericMessage::has_accel() const {
  return this != internal_default_instance() && accel_ != NULL;
}
void GenericMessage::clear_accel() {
  if (GetArenaNoVirtual() == NULL && accel_ != NULL) delete accel_;
  accel_ = NULL;
}
const ::T7::Accel& GenericMessage::accel() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.accel)
  return accel_ != NULL ? *accel_
                         : *::T7::Accel::internal_default_instance();
}
::T7::Accel* GenericMessage::mutable_accel() {
  
  if (accel_ == NULL) {
    accel_ = new ::T7::Accel;
  }
  // @@protoc_insertion_point(field_mutable:T7.GenericMessage.accel)
  return accel_;
}
::T7::Accel* GenericMessage::release_accel() {
  // @@protoc_insertion_point(field_release:T7.GenericMessage.accel)
  
  ::T7::Accel* temp = accel_;
  accel_ = NULL;
  return temp;
}
void GenericMessage::set_allocated_accel(::T7::Accel* accel) {
  delete accel_;
  accel_ = accel;
  if (accel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:T7.GenericMessage.accel)
}

// .T7.Gyro gyro = 9;
bool GenericMessage::has_gyro() const {
  return this != internal_default_instance() && gyro_ != NULL;
}
void GenericMessage::clear_gyro() {
  if (GetArenaNoVirtual() == NULL && gyro_ != NULL) delete gyro_;
  gyro_ = NULL;
}
const ::T7::Gyro& GenericMessage::gyro() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.gyro)
  return gyro_ != NULL ? *gyro_
                         : *::T7::Gyro::internal_default_instance();
}
::T7::Gyro* GenericMessage::mutable_gyro() {
  
  if (gyro_ == NULL) {
    gyro_ = new ::T7::Gyro;
  }
  // @@protoc_insertion_point(field_mutable:T7.GenericMessage.gyro)
  return gyro_;
}
::T7::Gyro* GenericMessage::release_gyro() {
  // @@protoc_insertion_point(field_release:T7.GenericMessage.gyro)
  
  ::T7::Gyro* temp = gyro_;
  gyro_ = NULL;
  return temp;
}
void GenericMessage::set_allocated_gyro(::T7::Gyro* gyro) {
  delete gyro_;
  gyro_ = gyro;
  if (gyro) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:T7.GenericMessage.gyro)
}

// .T7.Altitude altitude = 10;
bool GenericMessage::has_altitude() const {
  return this != internal_default_instance() && altitude_ != NULL;
}
void GenericMessage::clear_altitude() {
  if (GetArenaNoVirtual() == NULL && altitude_ != NULL) delete altitude_;
  altitude_ = NULL;
}
const ::T7::Altitude& GenericMessage::altitude() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.altitude)
  return altitude_ != NULL ? *altitude_
                         : *::T7::Altitude::internal_default_instance();
}
::T7::Altitude* GenericMessage::mutable_altitude() {
  
  if (altitude_ == NULL) {
    altitude_ = new ::T7::Altitude;
  }
  // @@protoc_insertion_point(field_mutable:T7.GenericMessage.altitude)
  return altitude_;
}
::T7::Altitude* GenericMessage::release_altitude() {
  // @@protoc_insertion_point(field_release:T7.GenericMessage.altitude)
  
  ::T7::Altitude* temp = altitude_;
  altitude_ = NULL;
  return temp;
}
void GenericMessage::set_allocated_altitude(::T7::Altitude* altitude) {
  delete altitude_;
  altitude_ = altitude;
  if (altitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:T7.GenericMessage.altitude)
}

// .T7.Attitude attitude = 11;
bool GenericMessage::has_attitude() const {
  return this != internal_default_instance() && attitude_ != NULL;
}
void GenericMessage::clear_attitude() {
  if (GetArenaNoVirtual() == NULL && attitude_ != NULL) delete attitude_;
  attitude_ = NULL;
}
const ::T7::Attitude& GenericMessage::attitude() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.attitude)
  return attitude_ != NULL ? *attitude_
                         : *::T7::Attitude::internal_default_instance();
}
::T7::Attitude* GenericMessage::mutable_attitude() {
  
  if (attitude_ == NULL) {
    attitude_ = new ::T7::Attitude;
  }
  // @@protoc_insertion_point(field_mutable:T7.GenericMessage.attitude)
  return attitude_;
}
::T7::Attitude* GenericMessage::release_attitude() {
  // @@protoc_insertion_point(field_release:T7.GenericMessage.attitude)
  
  ::T7::Attitude* temp = attitude_;
  attitude_ = NULL;
  return temp;
}
void GenericMessage::set_allocated_attitude(::T7::Attitude* attitude) {
  delete attitude_;
  attitude_ = attitude;
  if (attitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:T7.GenericMessage.attitude)
}

// .T7.Temp temp = 12;
bool GenericMessage::has_temp() const {
  return this != internal_default_instance() && temp_ != NULL;
}
void GenericMessage::clear_temp() {
  if (GetArenaNoVirtual() == NULL && temp_ != NULL) delete temp_;
  temp_ = NULL;
}
const ::T7::Temp& GenericMessage::temp() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.temp)
  return temp_ != NULL ? *temp_
                         : *::T7::Temp::internal_default_instance();
}
::T7::Temp* GenericMessage::mutable_temp() {
  
  if (temp_ == NULL) {
    temp_ = new ::T7::Temp;
  }
  // @@protoc_insertion_point(field_mutable:T7.GenericMessage.temp)
  return temp_;
}
::T7::Temp* GenericMessage::release_temp() {
  // @@protoc_insertion_point(field_release:T7.GenericMessage.temp)
  
  ::T7::Temp* temp = temp_;
  temp_ = NULL;
  return temp;
}
void GenericMessage::set_allocated_temp(::T7::Temp* temp) {
  delete temp_;
  temp_ = temp;
  if (temp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:T7.GenericMessage.temp)
}

// .T7.Battery bat = 13;
bool GenericMessage::has_bat() const {
  return this != internal_default_instance() && bat_ != NULL;
}
void GenericMessage::clear_bat() {
  if (GetArenaNoVirtual() == NULL && bat_ != NULL) delete bat_;
  bat_ = NULL;
}
const ::T7::Battery& GenericMessage::bat() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.bat)
  return bat_ != NULL ? *bat_
                         : *::T7::Battery::internal_default_instance();
}
::T7::Battery* GenericMessage::mutable_bat() {
  
  if (bat_ == NULL) {
    bat_ = new ::T7::Battery;
  }
  // @@protoc_insertion_point(field_mutable:T7.GenericMessage.bat)
  return bat_;
}
::T7::Battery* GenericMessage::release_bat() {
  // @@protoc_insertion_point(field_release:T7.GenericMessage.bat)
  
  ::T7::Battery* temp = bat_;
  bat_ = NULL;
  return temp;
}
void GenericMessage::set_allocated_bat(::T7::Battery* bat) {
  delete bat_;
  bat_ = bat;
  if (bat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:T7.GenericMessage.bat)
}

// .T7.Heading head = 14;
bool GenericMessage::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void GenericMessage::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::T7::Heading& GenericMessage::head() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.head)
  return head_ != NULL ? *head_
                         : *::T7::Heading::internal_default_instance();
}
::T7::Heading* GenericMessage::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::T7::Heading;
  }
  // @@protoc_insertion_point(field_mutable:T7.GenericMessage.head)
  return head_;
}
::T7::Heading* GenericMessage::release_head() {
  // @@protoc_insertion_point(field_release:T7.GenericMessage.head)
  
  ::T7::Heading* temp = head_;
  head_ = NULL;
  return temp;
}
void GenericMessage::set_allocated_head(::T7::Heading* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:T7.GenericMessage.head)
}

// .T7.ThermalResponse thermalresponse = 16;
bool GenericMessage::has_thermalresponse() const {
  return this != internal_default_instance() && thermalresponse_ != NULL;
}
void GenericMessage::clear_thermalresponse() {
  if (GetArenaNoVirtual() == NULL && thermalresponse_ != NULL) delete thermalresponse_;
  thermalresponse_ = NULL;
}
const ::T7::ThermalResponse& GenericMessage::thermalresponse() const {
  // @@protoc_insertion_point(field_get:T7.GenericMessage.thermalresponse)
  return thermalresponse_ != NULL ? *thermalresponse_
                         : *::T7::ThermalResponse::internal_default_instance();
}
::T7::ThermalResponse* GenericMessage::mutable_thermalresponse() {
  
  if (thermalresponse_ == NULL) {
    thermalresponse_ = new ::T7::ThermalResponse;
  }
  // @@protoc_insertion_point(field_mutable:T7.GenericMessage.thermalresponse)
  return thermalresponse_;
}
::T7::ThermalResponse* GenericMessage::release_thermalresponse() {
  // @@protoc_insertion_point(field_release:T7.GenericMessage.thermalresponse)
  
  ::T7::ThermalResponse* temp = thermalresponse_;
  thermalresponse_ = NULL;
  return temp;
}
void GenericMessage::set_allocated_thermalresponse(::T7::ThermalResponse* thermalresponse) {
  delete thermalresponse_;
  thermalresponse_ = thermalresponse;
  if (thermalresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:T7.GenericMessage.thermalresponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kRogerThatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roger_that_ = from.roger_that_;
  // @@protoc_insertion_point(copy_constructor:T7.Response)
}

void Response::SharedCtor() {
  roger_that_ = false;
  _cached_size_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:T7.Response)
  SharedDtor();
}

void Response::SharedDtor() {
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[1].descriptor;
}

const Response& Response::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.Response)
  roger_that_ = false;
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool roger_that = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &roger_that_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.Response)
  // bool roger_that = 1;
  if (this->roger_that() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->roger_that(), output);
  }

  // @@protoc_insertion_point(serialize_end:T7.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.Response)
  // bool roger_that = 1;
  if (this->roger_that() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->roger_that(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.Response)
  size_t total_size = 0;

  // bool roger_that = 1;
  if (this->roger_that() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.roger_that() != 0) {
    set_roger_that(from.roger_that());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(roger_that_, other->roger_that_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// bool roger_that = 1;
void Response::clear_roger_that() {
  roger_that_ = false;
}
bool Response::roger_that() const {
  // @@protoc_insertion_point(field_get:T7.Response.roger_that)
  return roger_that_;
}
void Response::set_roger_that(bool value) {
  
  roger_that_ = value;
  // @@protoc_insertion_point(field_set:T7.Response.roger_that)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeat::kAliveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeat::HeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.HeartBeat)
}
HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alive_ = from.alive_;
  // @@protoc_insertion_point(copy_constructor:T7.HeartBeat)
}

void HeartBeat::SharedCtor() {
  alive_ = false;
  _cached_size_ = 0;
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:T7.HeartBeat)
  SharedDtor();
}

void HeartBeat::SharedDtor() {
}

void HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[2].descriptor;
}

const HeartBeat& HeartBeat::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeartBeat* HeartBeat::New(::google::protobuf::Arena* arena) const {
  HeartBeat* n = new HeartBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.HeartBeat)
  alive_ = false;
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.HeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool alive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.HeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.HeartBeat)
  return false;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.HeartBeat)
  // bool alive = 1;
  if (this->alive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->alive(), output);
  }

  // @@protoc_insertion_point(serialize_end:T7.HeartBeat)
}

::google::protobuf::uint8* HeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.HeartBeat)
  // bool alive = 1;
  if (this->alive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->alive(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.HeartBeat)
  return target;
}

size_t HeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.HeartBeat)
  size_t total_size = 0;

  // bool alive = 1;
  if (this->alive() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.HeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.HeartBeat)
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.alive() != 0) {
    set_alive(from.alive());
  }
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {
  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeat::InternalSwap(HeartBeat* other) {
  std::swap(alive_, other->alive_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeat

// bool alive = 1;
void HeartBeat::clear_alive() {
  alive_ = false;
}
bool HeartBeat::alive() const {
  // @@protoc_insertion_point(field_get:T7.HeartBeat.alive)
  return alive_;
}
void HeartBeat::set_alive(bool value) {
  
  alive_ = value;
  // @@protoc_insertion_point(field_set:T7.HeartBeat.alive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Terminate::kTerminateKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Terminate::Terminate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.Terminate)
}
Terminate::Terminate(const Terminate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  terminatekey_ = from.terminatekey_;
  // @@protoc_insertion_point(copy_constructor:T7.Terminate)
}

void Terminate::SharedCtor() {
  terminatekey_ = 0;
  _cached_size_ = 0;
}

Terminate::~Terminate() {
  // @@protoc_insertion_point(destructor:T7.Terminate)
  SharedDtor();
}

void Terminate::SharedDtor() {
}

void Terminate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Terminate::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[3].descriptor;
}

const Terminate& Terminate::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Terminate* Terminate::New(::google::protobuf::Arena* arena) const {
  Terminate* n = new Terminate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Terminate::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.Terminate)
  terminatekey_ = 0;
}

bool Terminate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.Terminate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 terminateKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &terminatekey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.Terminate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.Terminate)
  return false;
#undef DO_
}

void Terminate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.Terminate)
  // int32 terminateKey = 1;
  if (this->terminatekey() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->terminatekey(), output);
  }

  // @@protoc_insertion_point(serialize_end:T7.Terminate)
}

::google::protobuf::uint8* Terminate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.Terminate)
  // int32 terminateKey = 1;
  if (this->terminatekey() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->terminatekey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.Terminate)
  return target;
}

size_t Terminate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.Terminate)
  size_t total_size = 0;

  // int32 terminateKey = 1;
  if (this->terminatekey() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->terminatekey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Terminate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.Terminate)
  GOOGLE_DCHECK_NE(&from, this);
  const Terminate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Terminate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.Terminate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.Terminate)
    MergeFrom(*source);
  }
}

void Terminate::MergeFrom(const Terminate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.Terminate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.terminatekey() != 0) {
    set_terminatekey(from.terminatekey());
  }
}

void Terminate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.Terminate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Terminate::CopyFrom(const Terminate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.Terminate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Terminate::IsInitialized() const {
  return true;
}

void Terminate::Swap(Terminate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Terminate::InternalSwap(Terminate* other) {
  std::swap(terminatekey_, other->terminatekey_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Terminate::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Terminate

// int32 terminateKey = 1;
void Terminate::clear_terminatekey() {
  terminatekey_ = 0;
}
::google::protobuf::int32 Terminate::terminatekey() const {
  // @@protoc_insertion_point(field_get:T7.Terminate.terminateKey)
  return terminatekey_;
}
void Terminate::set_terminatekey(::google::protobuf::int32 value) {
  
  terminatekey_ = value;
  // @@protoc_insertion_point(field_set:T7.Terminate.terminateKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigData::kConfigKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigData::ConfigData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.ConfigData)
}
ConfigData::ConfigData(const ConfigData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  configkey_ = from.configkey_;
  // @@protoc_insertion_point(copy_constructor:T7.ConfigData)
}

void ConfigData::SharedCtor() {
  configkey_ = 0;
  _cached_size_ = 0;
}

ConfigData::~ConfigData() {
  // @@protoc_insertion_point(destructor:T7.ConfigData)
  SharedDtor();
}

void ConfigData::SharedDtor() {
}

void ConfigData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigData::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[4].descriptor;
}

const ConfigData& ConfigData::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfigData* ConfigData::New(::google::protobuf::Arena* arena) const {
  ConfigData* n = new ConfigData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigData::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.ConfigData)
  configkey_ = 0;
}

bool ConfigData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.ConfigData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 configKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.ConfigData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.ConfigData)
  return false;
#undef DO_
}

void ConfigData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.ConfigData)
  // int32 configKey = 1;
  if (this->configkey() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->configkey(), output);
  }

  // @@protoc_insertion_point(serialize_end:T7.ConfigData)
}

::google::protobuf::uint8* ConfigData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.ConfigData)
  // int32 configKey = 1;
  if (this->configkey() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->configkey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.ConfigData)
  return target;
}

size_t ConfigData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.ConfigData)
  size_t total_size = 0;

  // int32 configKey = 1;
  if (this->configkey() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->configkey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.ConfigData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.ConfigData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.ConfigData)
    MergeFrom(*source);
  }
}

void ConfigData::MergeFrom(const ConfigData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.ConfigData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.configkey() != 0) {
    set_configkey(from.configkey());
  }
}

void ConfigData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.ConfigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigData::CopyFrom(const ConfigData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.ConfigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigData::IsInitialized() const {
  return true;
}

void ConfigData::Swap(ConfigData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigData::InternalSwap(ConfigData* other) {
  std::swap(configkey_, other->configkey_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigData::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigData

// int32 configKey = 1;
void ConfigData::clear_configkey() {
  configkey_ = 0;
}
::google::protobuf::int32 ConfigData::configkey() const {
  // @@protoc_insertion_point(field_get:T7.ConfigData.configKey)
  return configkey_;
}
void ConfigData::set_configkey(::google::protobuf::int32 value) {
  
  configkey_ = value;
  // @@protoc_insertion_point(field_set:T7.ConfigData.configKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveCamera::kArrowKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveCamera::MoveCamera()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.MoveCamera)
}
MoveCamera::MoveCamera(const MoveCamera& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arrowkey_ = from.arrowkey_;
  // @@protoc_insertion_point(copy_constructor:T7.MoveCamera)
}

void MoveCamera::SharedCtor() {
  arrowkey_ = 0;
  _cached_size_ = 0;
}

MoveCamera::~MoveCamera() {
  // @@protoc_insertion_point(destructor:T7.MoveCamera)
  SharedDtor();
}

void MoveCamera::SharedDtor() {
}

void MoveCamera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveCamera::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[5].descriptor;
}

const MoveCamera& MoveCamera::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

MoveCamera* MoveCamera::New(::google::protobuf::Arena* arena) const {
  MoveCamera* n = new MoveCamera;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MoveCamera::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.MoveCamera)
  arrowkey_ = 0;
}

bool MoveCamera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.MoveCamera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 arrowKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrowkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.MoveCamera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.MoveCamera)
  return false;
#undef DO_
}

void MoveCamera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.MoveCamera)
  // int32 arrowKey = 1;
  if (this->arrowkey() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->arrowkey(), output);
  }

  // @@protoc_insertion_point(serialize_end:T7.MoveCamera)
}

::google::protobuf::uint8* MoveCamera::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.MoveCamera)
  // int32 arrowKey = 1;
  if (this->arrowkey() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->arrowkey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.MoveCamera)
  return target;
}

size_t MoveCamera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.MoveCamera)
  size_t total_size = 0;

  // int32 arrowKey = 1;
  if (this->arrowkey() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arrowkey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveCamera::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.MoveCamera)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveCamera* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveCamera>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.MoveCamera)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.MoveCamera)
    MergeFrom(*source);
  }
}

void MoveCamera::MergeFrom(const MoveCamera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.MoveCamera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.arrowkey() != 0) {
    set_arrowkey(from.arrowkey());
  }
}

void MoveCamera::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.MoveCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveCamera::CopyFrom(const MoveCamera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.MoveCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveCamera::IsInitialized() const {
  return true;
}

void MoveCamera::Swap(MoveCamera* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveCamera::InternalSwap(MoveCamera* other) {
  std::swap(arrowkey_, other->arrowkey_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MoveCamera::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MoveCamera

// int32 arrowKey = 1;
void MoveCamera::clear_arrowkey() {
  arrowkey_ = 0;
}
::google::protobuf::int32 MoveCamera::arrowkey() const {
  // @@protoc_insertion_point(field_get:T7.MoveCamera.arrowKey)
  return arrowkey_;
}
void MoveCamera::set_arrowkey(::google::protobuf::int32 value) {
  
  arrowkey_ = value;
  // @@protoc_insertion_point(field_set:T7.MoveCamera.arrowKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThermalRequest::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThermalRequest::ThermalRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.ThermalRequest)
}
ThermalRequest::ThermalRequest(const ThermalRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_ = from.request_;
  // @@protoc_insertion_point(copy_constructor:T7.ThermalRequest)
}

void ThermalRequest::SharedCtor() {
  request_ = false;
  _cached_size_ = 0;
}

ThermalRequest::~ThermalRequest() {
  // @@protoc_insertion_point(destructor:T7.ThermalRequest)
  SharedDtor();
}

void ThermalRequest::SharedDtor() {
}

void ThermalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThermalRequest::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[6].descriptor;
}

const ThermalRequest& ThermalRequest::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

ThermalRequest* ThermalRequest::New(::google::protobuf::Arena* arena) const {
  ThermalRequest* n = new ThermalRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThermalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.ThermalRequest)
  request_ = false;
}

bool ThermalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.ThermalRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.ThermalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.ThermalRequest)
  return false;
#undef DO_
}

void ThermalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.ThermalRequest)
  // bool request = 1;
  if (this->request() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->request(), output);
  }

  // @@protoc_insertion_point(serialize_end:T7.ThermalRequest)
}

::google::protobuf::uint8* ThermalRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.ThermalRequest)
  // bool request = 1;
  if (this->request() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->request(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.ThermalRequest)
  return target;
}

size_t ThermalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.ThermalRequest)
  size_t total_size = 0;

  // bool request = 1;
  if (this->request() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThermalRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.ThermalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ThermalRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThermalRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.ThermalRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.ThermalRequest)
    MergeFrom(*source);
  }
}

void ThermalRequest::MergeFrom(const ThermalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.ThermalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.request() != 0) {
    set_request(from.request());
  }
}

void ThermalRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.ThermalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThermalRequest::CopyFrom(const ThermalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.ThermalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalRequest::IsInitialized() const {
  return true;
}

void ThermalRequest::Swap(ThermalRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThermalRequest::InternalSwap(ThermalRequest* other) {
  std::swap(request_, other->request_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThermalRequest::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThermalRequest

// bool request = 1;
void ThermalRequest::clear_request() {
  request_ = false;
}
bool ThermalRequest::request() const {
  // @@protoc_insertion_point(field_get:T7.ThermalRequest.request)
  return request_;
}
void ThermalRequest::set_request(bool value) {
  
  request_ = value;
  // @@protoc_insertion_point(field_set:T7.ThermalRequest.request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Accel::kXFieldNumber;
const int Accel::kYFieldNumber;
const int Accel::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Accel::Accel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.Accel)
}
Accel::Accel(const Accel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:T7.Accel)
}

void Accel::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Accel::~Accel() {
  // @@protoc_insertion_point(destructor:T7.Accel)
  SharedDtor();
}

void Accel::SharedDtor() {
}

void Accel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Accel::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[7].descriptor;
}

const Accel& Accel::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Accel* Accel::New(::google::protobuf::Arena* arena) const {
  Accel* n = new Accel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Accel::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.Accel)
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

bool Accel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.Accel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.Accel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.Accel)
  return false;
#undef DO_
}

void Accel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.Accel)
  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:T7.Accel)
}

::google::protobuf::uint8* Accel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.Accel)
  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.Accel)
  return target;
}

size_t Accel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.Accel)
  size_t total_size = 0;

  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Accel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.Accel)
  GOOGLE_DCHECK_NE(&from, this);
  const Accel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Accel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.Accel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.Accel)
    MergeFrom(*source);
  }
}

void Accel::MergeFrom(const Accel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.Accel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Accel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.Accel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accel::CopyFrom(const Accel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.Accel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel::IsInitialized() const {
  return true;
}

void Accel::Swap(Accel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Accel::InternalSwap(Accel* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Accel::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Accel

// double x = 1;
void Accel::clear_x() {
  x_ = 0;
}
double Accel::x() const {
  // @@protoc_insertion_point(field_get:T7.Accel.x)
  return x_;
}
void Accel::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:T7.Accel.x)
}

// double y = 2;
void Accel::clear_y() {
  y_ = 0;
}
double Accel::y() const {
  // @@protoc_insertion_point(field_get:T7.Accel.y)
  return y_;
}
void Accel::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:T7.Accel.y)
}

// double z = 3;
void Accel::clear_z() {
  z_ = 0;
}
double Accel::z() const {
  // @@protoc_insertion_point(field_get:T7.Accel.z)
  return z_;
}
void Accel::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:T7.Accel.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gyro::kXFieldNumber;
const int Gyro::kYFieldNumber;
const int Gyro::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gyro::Gyro()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.Gyro)
}
Gyro::Gyro(const Gyro& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:T7.Gyro)
}

void Gyro::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Gyro::~Gyro() {
  // @@protoc_insertion_point(destructor:T7.Gyro)
  SharedDtor();
}

void Gyro::SharedDtor() {
}

void Gyro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gyro::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[8].descriptor;
}

const Gyro& Gyro::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gyro* Gyro::New(::google::protobuf::Arena* arena) const {
  Gyro* n = new Gyro;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gyro::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.Gyro)
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

bool Gyro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.Gyro)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.Gyro)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.Gyro)
  return false;
#undef DO_
}

void Gyro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.Gyro)
  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:T7.Gyro)
}

::google::protobuf::uint8* Gyro::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.Gyro)
  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.Gyro)
  return target;
}

size_t Gyro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.Gyro)
  size_t total_size = 0;

  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gyro::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.Gyro)
  GOOGLE_DCHECK_NE(&from, this);
  const Gyro* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gyro>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.Gyro)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.Gyro)
    MergeFrom(*source);
  }
}

void Gyro::MergeFrom(const Gyro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.Gyro)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Gyro::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.Gyro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gyro::CopyFrom(const Gyro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.Gyro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gyro::IsInitialized() const {
  return true;
}

void Gyro::Swap(Gyro* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gyro::InternalSwap(Gyro* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gyro::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gyro

// double x = 1;
void Gyro::clear_x() {
  x_ = 0;
}
double Gyro::x() const {
  // @@protoc_insertion_point(field_get:T7.Gyro.x)
  return x_;
}
void Gyro::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:T7.Gyro.x)
}

// double y = 2;
void Gyro::clear_y() {
  y_ = 0;
}
double Gyro::y() const {
  // @@protoc_insertion_point(field_get:T7.Gyro.y)
  return y_;
}
void Gyro::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:T7.Gyro.y)
}

// double z = 3;
void Gyro::clear_z() {
  z_ = 0;
}
double Gyro::z() const {
  // @@protoc_insertion_point(field_get:T7.Gyro.z)
  return z_;
}
void Gyro::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:T7.Gyro.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Altitude::kAltFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Altitude::Altitude()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.Altitude)
}
Altitude::Altitude(const Altitude& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alt_ = from.alt_;
  // @@protoc_insertion_point(copy_constructor:T7.Altitude)
}

void Altitude::SharedCtor() {
  alt_ = 0;
  _cached_size_ = 0;
}

Altitude::~Altitude() {
  // @@protoc_insertion_point(destructor:T7.Altitude)
  SharedDtor();
}

void Altitude::SharedDtor() {
}

void Altitude::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Altitude::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[9].descriptor;
}

const Altitude& Altitude::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Altitude* Altitude::New(::google::protobuf::Arena* arena) const {
  Altitude* n = new Altitude;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Altitude::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.Altitude)
  alt_ = 0;
}

bool Altitude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.Altitude)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double alt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.Altitude)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.Altitude)
  return false;
#undef DO_
}

void Altitude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.Altitude)
  // double alt = 1;
  if (this->alt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->alt(), output);
  }

  // @@protoc_insertion_point(serialize_end:T7.Altitude)
}

::google::protobuf::uint8* Altitude::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.Altitude)
  // double alt = 1;
  if (this->alt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->alt(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.Altitude)
  return target;
}

size_t Altitude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.Altitude)
  size_t total_size = 0;

  // double alt = 1;
  if (this->alt() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Altitude::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.Altitude)
  GOOGLE_DCHECK_NE(&from, this);
  const Altitude* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Altitude>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.Altitude)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.Altitude)
    MergeFrom(*source);
  }
}

void Altitude::MergeFrom(const Altitude& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.Altitude)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.alt() != 0) {
    set_alt(from.alt());
  }
}

void Altitude::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.Altitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Altitude::CopyFrom(const Altitude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.Altitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Altitude::IsInitialized() const {
  return true;
}

void Altitude::Swap(Altitude* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Altitude::InternalSwap(Altitude* other) {
  std::swap(alt_, other->alt_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Altitude::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Altitude

// double alt = 1;
void Altitude::clear_alt() {
  alt_ = 0;
}
double Altitude::alt() const {
  // @@protoc_insertion_point(field_get:T7.Altitude.alt)
  return alt_;
}
void Altitude::set_alt(double value) {
  
  alt_ = value;
  // @@protoc_insertion_point(field_set:T7.Altitude.alt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attitude::kRollFieldNumber;
const int Attitude::kPitchFieldNumber;
const int Attitude::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attitude::Attitude()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.Attitude)
}
Attitude::Attitude(const Attitude& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roll_, &from.roll_,
    reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:T7.Attitude)
}

void Attitude::SharedCtor() {
  ::memset(&roll_, 0, reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_) + sizeof(yaw_));
  _cached_size_ = 0;
}

Attitude::~Attitude() {
  // @@protoc_insertion_point(destructor:T7.Attitude)
  SharedDtor();
}

void Attitude::SharedDtor() {
}

void Attitude::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attitude::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[10].descriptor;
}

const Attitude& Attitude::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Attitude* Attitude::New(::google::protobuf::Arena* arena) const {
  Attitude* n = new Attitude;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Attitude::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.Attitude)
  ::memset(&roll_, 0, reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_) + sizeof(yaw_));
}

bool Attitude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.Attitude)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double roll = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.Attitude)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.Attitude)
  return false;
#undef DO_
}

void Attitude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.Attitude)
  // double roll = 1;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->roll(), output);
  }

  // double pitch = 2;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pitch(), output);
  }

  // double yaw = 3;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->yaw(), output);
  }

  // @@protoc_insertion_point(serialize_end:T7.Attitude)
}

::google::protobuf::uint8* Attitude::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.Attitude)
  // double roll = 1;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->roll(), target);
  }

  // double pitch = 2;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pitch(), target);
  }

  // double yaw = 3;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->yaw(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.Attitude)
  return target;
}

size_t Attitude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.Attitude)
  size_t total_size = 0;

  // double roll = 1;
  if (this->roll() != 0) {
    total_size += 1 + 8;
  }

  // double pitch = 2;
  if (this->pitch() != 0) {
    total_size += 1 + 8;
  }

  // double yaw = 3;
  if (this->yaw() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attitude::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.Attitude)
  GOOGLE_DCHECK_NE(&from, this);
  const Attitude* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Attitude>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.Attitude)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.Attitude)
    MergeFrom(*source);
  }
}

void Attitude::MergeFrom(const Attitude& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.Attitude)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
}

void Attitude::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.Attitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attitude::CopyFrom(const Attitude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.Attitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attitude::IsInitialized() const {
  return true;
}

void Attitude::Swap(Attitude* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attitude::InternalSwap(Attitude* other) {
  std::swap(roll_, other->roll_);
  std::swap(pitch_, other->pitch_);
  std::swap(yaw_, other->yaw_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Attitude::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Attitude

// double roll = 1;
void Attitude::clear_roll() {
  roll_ = 0;
}
double Attitude::roll() const {
  // @@protoc_insertion_point(field_get:T7.Attitude.roll)
  return roll_;
}
void Attitude::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:T7.Attitude.roll)
}

// double pitch = 2;
void Attitude::clear_pitch() {
  pitch_ = 0;
}
double Attitude::pitch() const {
  // @@protoc_insertion_point(field_get:T7.Attitude.pitch)
  return pitch_;
}
void Attitude::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:T7.Attitude.pitch)
}

// double yaw = 3;
void Attitude::clear_yaw() {
  yaw_ = 0;
}
double Attitude::yaw() const {
  // @@protoc_insertion_point(field_get:T7.Attitude.yaw)
  return yaw_;
}
void Attitude::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:T7.Attitude.yaw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Temp::kTempFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Temp::Temp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.Temp)
}
Temp::Temp(const Temp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  temp_ = from.temp_;
  // @@protoc_insertion_point(copy_constructor:T7.Temp)
}

void Temp::SharedCtor() {
  temp_ = 0;
  _cached_size_ = 0;
}

Temp::~Temp() {
  // @@protoc_insertion_point(destructor:T7.Temp)
  SharedDtor();
}

void Temp::SharedDtor() {
}

void Temp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Temp::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[11].descriptor;
}

const Temp& Temp::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Temp* Temp::New(::google::protobuf::Arena* arena) const {
  Temp* n = new Temp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Temp::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.Temp)
  temp_ = 0;
}

bool Temp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.Temp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double temp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.Temp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.Temp)
  return false;
#undef DO_
}

void Temp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.Temp)
  // double temp = 1;
  if (this->temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->temp(), output);
  }

  // @@protoc_insertion_point(serialize_end:T7.Temp)
}

::google::protobuf::uint8* Temp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.Temp)
  // double temp = 1;
  if (this->temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->temp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.Temp)
  return target;
}

size_t Temp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.Temp)
  size_t total_size = 0;

  // double temp = 1;
  if (this->temp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Temp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.Temp)
  GOOGLE_DCHECK_NE(&from, this);
  const Temp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Temp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.Temp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.Temp)
    MergeFrom(*source);
  }
}

void Temp::MergeFrom(const Temp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.Temp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.temp() != 0) {
    set_temp(from.temp());
  }
}

void Temp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.Temp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Temp::CopyFrom(const Temp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.Temp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Temp::IsInitialized() const {
  return true;
}

void Temp::Swap(Temp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Temp::InternalSwap(Temp* other) {
  std::swap(temp_, other->temp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Temp::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Temp

// double temp = 1;
void Temp::clear_temp() {
  temp_ = 0;
}
double Temp::temp() const {
  // @@protoc_insertion_point(field_get:T7.Temp.temp)
  return temp_;
}
void Temp::set_temp(double value) {
  
  temp_ = value;
  // @@protoc_insertion_point(field_set:T7.Temp.temp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Battery::kPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Battery::Battery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.Battery)
}
Battery::Battery(const Battery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  percent_ = from.percent_;
  // @@protoc_insertion_point(copy_constructor:T7.Battery)
}

void Battery::SharedCtor() {
  percent_ = 0;
  _cached_size_ = 0;
}

Battery::~Battery() {
  // @@protoc_insertion_point(destructor:T7.Battery)
  SharedDtor();
}

void Battery::SharedDtor() {
}

void Battery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battery::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[12].descriptor;
}

const Battery& Battery::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Battery* Battery::New(::google::protobuf::Arena* arena) const {
  Battery* n = new Battery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.Battery)
  percent_ = 0;
}

bool Battery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.Battery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double percent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.Battery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.Battery)
  return false;
#undef DO_
}

void Battery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.Battery)
  // double percent = 1;
  if (this->percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->percent(), output);
  }

  // @@protoc_insertion_point(serialize_end:T7.Battery)
}

::google::protobuf::uint8* Battery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.Battery)
  // double percent = 1;
  if (this->percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->percent(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.Battery)
  return target;
}

size_t Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.Battery)
  size_t total_size = 0;

  // double percent = 1;
  if (this->percent() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  const Battery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Battery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.Battery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.Battery)
    MergeFrom(*source);
  }
}

void Battery::MergeFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.percent() != 0) {
    set_percent(from.percent());
  }
}

void Battery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battery::IsInitialized() const {
  return true;
}

void Battery::Swap(Battery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Battery::InternalSwap(Battery* other) {
  std::swap(percent_, other->percent_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Battery::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Battery

// double percent = 1;
void Battery::clear_percent() {
  percent_ = 0;
}
double Battery::percent() const {
  // @@protoc_insertion_point(field_get:T7.Battery.percent)
  return percent_;
}
void Battery::set_percent(double value) {
  
  percent_ = value;
  // @@protoc_insertion_point(field_set:T7.Battery.percent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Heading::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heading::Heading()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.Heading)
}
Heading::Heading(const Heading& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  heading_ = from.heading_;
  // @@protoc_insertion_point(copy_constructor:T7.Heading)
}

void Heading::SharedCtor() {
  heading_ = 0;
  _cached_size_ = 0;
}

Heading::~Heading() {
  // @@protoc_insertion_point(destructor:T7.Heading)
  SharedDtor();
}

void Heading::SharedDtor() {
}

void Heading::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heading::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[13].descriptor;
}

const Heading& Heading::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Heading* Heading::New(::google::protobuf::Arena* arena) const {
  Heading* n = new Heading;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Heading::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.Heading)
  heading_ = 0;
}

bool Heading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.Heading)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double heading = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.Heading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.Heading)
  return false;
#undef DO_
}

void Heading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.Heading)
  // double heading = 1;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->heading(), output);
  }

  // @@protoc_insertion_point(serialize_end:T7.Heading)
}

::google::protobuf::uint8* Heading::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.Heading)
  // double heading = 1;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->heading(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.Heading)
  return target;
}

size_t Heading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.Heading)
  size_t total_size = 0;

  // double heading = 1;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heading::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.Heading)
  GOOGLE_DCHECK_NE(&from, this);
  const Heading* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Heading>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.Heading)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.Heading)
    MergeFrom(*source);
  }
}

void Heading::MergeFrom(const Heading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.Heading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
}

void Heading::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.Heading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heading::CopyFrom(const Heading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.Heading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heading::IsInitialized() const {
  return true;
}

void Heading::Swap(Heading* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heading::InternalSwap(Heading* other) {
  std::swap(heading_, other->heading_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Heading::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Heading

// double heading = 1;
void Heading::clear_heading() {
  heading_ = 0;
}
double Heading::heading() const {
  // @@protoc_insertion_point(field_get:T7.Heading.heading)
  return heading_;
}
void Heading::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:T7.Heading.heading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThermalResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThermalResponse::ThermalResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_T7Messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:T7.ThermalResponse)
}
ThermalResponse::ThermalResponse(const ThermalResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:T7.ThermalResponse)
}

void ThermalResponse::SharedCtor() {
  response_ = 0;
  _cached_size_ = 0;
}

ThermalResponse::~ThermalResponse() {
  // @@protoc_insertion_point(destructor:T7.ThermalResponse)
  SharedDtor();
}

void ThermalResponse::SharedDtor() {
}

void ThermalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThermalResponse::descriptor() {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[14].descriptor;
}

const ThermalResponse& ThermalResponse::default_instance() {
  protobuf_T7Messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

ThermalResponse* ThermalResponse::New(::google::protobuf::Arena* arena) const {
  ThermalResponse* n = new ThermalResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThermalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:T7.ThermalResponse)
  response_ = 0;
}

bool ThermalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:T7.ThermalResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:T7.ThermalResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:T7.ThermalResponse)
  return false;
#undef DO_
}

void ThermalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:T7.ThermalResponse)
  // double response = 1;
  if (this->response() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->response(), output);
  }

  // @@protoc_insertion_point(serialize_end:T7.ThermalResponse)
}

::google::protobuf::uint8* ThermalResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:T7.ThermalResponse)
  // double response = 1;
  if (this->response() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->response(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:T7.ThermalResponse)
  return target;
}

size_t ThermalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:T7.ThermalResponse)
  size_t total_size = 0;

  // double response = 1;
  if (this->response() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThermalResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:T7.ThermalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ThermalResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThermalResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:T7.ThermalResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:T7.ThermalResponse)
    MergeFrom(*source);
  }
}

void ThermalResponse::MergeFrom(const ThermalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:T7.ThermalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.response() != 0) {
    set_response(from.response());
  }
}

void ThermalResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:T7.ThermalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThermalResponse::CopyFrom(const ThermalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:T7.ThermalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalResponse::IsInitialized() const {
  return true;
}

void ThermalResponse::Swap(ThermalResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThermalResponse::InternalSwap(ThermalResponse* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThermalResponse::GetMetadata() const {
  protobuf_T7Messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_T7Messages_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThermalResponse

// double response = 1;
void ThermalResponse::clear_response() {
  response_ = 0;
}
double ThermalResponse::response() const {
  // @@protoc_insertion_point(field_get:T7.ThermalResponse.response)
  return response_;
}
void ThermalResponse::set_response(double value) {
  
  response_ = value;
  // @@protoc_insertion_point(field_set:T7.ThermalResponse.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace T7

// @@protoc_insertion_point(global_scope)
