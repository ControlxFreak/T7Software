// ---------------------------------------------------------- //
// Team 7 Message Prototype Description
// ---------------------------------------------------------- //
// This describes all messages sent via TCP between the HSS and
// the UAV software
// ---------------------------------------------------------- //
// Lockheed Martin
// Engineering Leadership Development Program
// Team 7
// 22 April 2017
// Anthony Trezza
// ---------------------------------------------------------- //
// Change Log:
// 22 April 2017 - att - Birthday! <(^.^)>
// 05 May 2017   - att - Added Terminate Flags for soft shudown 
//		         and emergency stops. Also - removed 
//			 unnecessary updateparams. Also removed
//			 the unnecessary times in temp and bat
// 06 June 2017	- jfm - Adding messages for UAV heading, thermal
//			array max reading request and response,
//			and thermal array toggle.
// 19 June 2017 - att - Added WiFi Signal Strength Message
// ---------------------------------------------------------- //

syntax = "proto3"; // Newest version of the protocol language
package T7; // Basically the namespace

// ---------------------------------------------------------- //
// GENERIC MESSAGE
// ---------------------------------------------------------- //
// The generic message will be sent every single time.
// The data that is defined in the MsgType structure will
// tell the reciever what to parse.
message GenericMessage {
	int32 msgtype = 1;
	double time = 2;
	
	// INFO MESSAGE //
	Response response = 3;
	HeartBeat heartbeat = 4;
	Terminate terminate = 5;
	
	// HSS -> UAV //
	ConfigData configdata = 6;
	MoveCamera movecamera = 7;
	ThermalRequest thermalrequest = 15;

	// UAV->HSS //
	Accel accel = 8;
	Gyro gyro = 9;
	Altitude altitude = 10;
	Attitude attitude = 11;
	Temp temp = 12;
	Battery bat = 13;
	Heading head = 14;
	ThermalResponse thermalresponse = 16;
        WiFi wifi = 17;

	// Pixhawk->UAV //
	Pixhawk pixhawk = 18;

	enum MsgType {
		// INFO MESSAGE //
		RESPONSE = 0;
		HEARTBEAT = 1;
		TERMINATE = 2;

		// HSS -> UAV //
		CONFIG_DATA = 101;
		MOVE_CAMERA = 102;
		THERMAL_REQUEST = 103;

		// UAV -> HSS //
		ACCEL = 200;
		GYRO = 201;
		ALTITUDE = 202;
		ATTITUDE = 203;
		TEMP = 204;
		BAT = 205;
		HEAD = 206;
		THERMAL_RESPONSE = 207;
                WIFI = 208;
		
		// Pixhawk -> UAV //
		PIXHAWK = 300;
	}

}


// ---------------------------------------------------------- //
// Info Messages
// ---------------------------------------------------------- //

// Response //
// Basic TCP response to a sucesfully recieved message
// THIS WILL NOT HAVE ITS OWN THREAD.
message Response {
	 bool roger_that = 1;
}

// HeartBeat //
// This message will be sent both from the UAV and from the HSS 
// Periodically to ensure that they are both alive
message HeartBeat { 
	 bool alive = 1;
}

// Terminate //
// This message will be the message that the UAV will recieve to self terminate or 
// Send the UAV into a softshutdown or emergency stop
message Terminate  {
	int32 terminateKey = 1;
	
	enum TerminateKeys{
	     selfTerminate = 0;
             softShutdown = 1;
	     emergencyStop= 2;
	} 
}

// ---------------------------------------------------------- //
// HSS -> UAV Messages
// ---------------------------------------------------------- //

// ConfigData //
// This message is to satisfy the requirement of allowing the
// operator to configure the data that they recieve in real time
message ConfigData {
	int32 configKey = 1;
	
	// This will let me know wich one to use in the switch case
	enum ToggleKeys{
	     toggleAccel = 0;
	     toggleGyro = 1;
	     toggleAltitude = 2;
	     toggleAttitude = 3;
	     toggleTemp = 4;
	     toggleBat = 5;
	     toggleArray = 6;
	     toggleHead = 7;
	     toggleWifi = 8;
	}
}

// MoveCamera //
// This message will allow the operator to move the pan-tilt 
// gimble attached to the camera
message MoveCamera  {
	int32 arrowKey = 1;

	enum ArrowKeys{
		UP = 0;
		RIGHT = 1;
		DOWN = 2;
		LEFT = 3;
	}
}

// ThermalRequest //
// This message will request the maximum reading from the
// thermal array at the current time.
message ThermalRequest {
	bool request = 1; // Not sure if message with no fields is allowed.
}

// ---------------------------------------------------------- //
// UAV -> HSS Messages
// ---------------------------------------------------------- //
// Accel //
// This message defines the accelerometer message.  
message Accel {
	 double x = 1;	//  [m/s^2]
	 double y = 2;	//  [m/s^2]
	 double z = 3;	//  [m/s^2]
}

// Gyro //
// This message describes the gyroscop message
message Gyro {	
	 double x = 1;	//   [rad/s^2]
	 double y = 2;	//   [rad/s^2]
	 double z = 3;	//   [rad/s^2]
}

// Altitude //
// This message describes the altitude message
message Altitude {
	 double alt = 1;	// [m]
}

// Attitude //
// This message describes the attitude message
message Attitude {
	 double roll = 1;	// [rad]
	 double pitch = 2;	// [rad]
	 double yaw = 3;	// [rad]
}

// Temp //
// This message describes the air temperature message.
message Temp {	
	 double temp = 1;	//   [c]
}

// Battery //
// This message defines the battery message.
message Battery {
	 double percent = 1;	//   [%]
}

// Heading //
// This message defines the heading message.
message Heading {
	double heading = 1;	// [rad]
}

// ThermalResponse //
// This message contains the maximum reading from the
// thermal array at the current time. Used in the
// prioritization algorithm.
message ThermalResponse {
	double response = 1;	// [c]
}

// WiFi //
// This message contains the wifi signal strength of
// the currently connected host on WLAN[0]
message WiFi {
     double strength = 1; // dB
     double freq = 2; // MHz
}

// Pixhawk //
// This message is a helper from python -> uav
message Pixhawk{
	double velx = 1; // [m/s]
	double vely = 2; // [m/s]
	double velz = 3; // [m/s]
	
	double roll = 4; // [rad]
	double pitch = 5; // [rad]
	double yaw = 6; // [rad]
	double altitude = 7; // [rad]
	double battery = 8; // [rad]
}

